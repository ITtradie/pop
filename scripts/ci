#!/usr/bin/env python3

# Setting up sbuild requires the following commands:
#     sudo apt install sbuild
#     sudo sbuild-adduser "$USER"
#     newgrp sbuild
#     sudo sbuild-createchroot --include=eatmydata,ccache,gnupg --components=main,restricted,universe,multiverse bionic /srv/chroot/bionic-amd64-sbuild http://archive.ubuntu.com/ubuntu
#     sudo sbuild-createchroot --include=eatmydata,ccache,gnupg --components=main,restricted,universe,multiverse cosmic /srv/chroot/cosmic-amd64-sbuild http://archive.ubuntu.com/ubuntu
#     sudo sbuild-createchroot --include=eatmydata,ccache,gnupg --components=main,restricted,universe,multiverse disco /srv/chroot/disco-amd64-sbuild http://archive.ubuntu.com/ubuntu

import argparse
from collections import namedtuple
from debian.changelog import Changelog, Version
from debian.deb822 import Dsc, Deb822
import os
from os import path
import shutil
from subprocess import check_call, check_output
import sys
from threading import Lock

from lib import foreach_repo, github_post
from git import git_ids_and_branches, git_timestamp_id, git_datetime_id, git_archive_id

Series = namedtuple('Series', 'codename version')

parser = argparse.ArgumentParser(description="Package and deploy all Pop!_OS repositories")
parser.add_argument("repos", nargs="*", default=[])
parser.add_argument("--dev", action="store_true")
parser.add_argument("--retry", action="store_true")
args = parser.parse_args(sys.argv[1:])

POP_DIR = path.dirname(path.dirname(path.abspath(__file__)))
if args.dev:
    BUILD_DIR = path.join(POP_DIR, '_build', 'dev')
else:
    BUILD_DIR = path.join(POP_DIR, '_build')
GIT_DIR = path.join(BUILD_DIR, 'git')
SOURCE_DIR = path.join(BUILD_DIR, 'source')
BINARY_DIR = path.join(BUILD_DIR, 'binary')
REPO_DIR = path.join(BUILD_DIR, 'repos')

build_series = {
    'bionic': ('18.04', True),
    'cosmic': ('18.10', True),
    'disco': ('19.04', True),
}


def iprint(level, value):
    indent = ' ' * (level * 4)
    print('>>> ' + indent + str(value), flush=True)


def parse_branch(branch):
    parts = branch.split('_')
    assert len(parts) <= 2
    pocket = parts[0]
    codename = (None if len(parts) < 2 else parts[1])
    return (pocket, codename)


def iter_series(branches):
    for b in branches:
        if '/' in b:
            continue
        (pocket, codename) = parse_branch(b)
        if codename is None:
            for (codename, (version, wildcard)) in build_series.items():
                if wildcard:
                    yield (Series(codename, version), pocket)
        elif codename in build_series:
            version, wildcard = build_series[codename]
            yield (Series(codename, version), pocket)


def expand_series(branches):
    result = {}
    for (series, pocket) in iter_series(branches):
        if series not in result:
            result[series] = set()
        result[series].add(pocket)
    return result

GitTar = namedtuple('GitTar', 'id timestamp datetime archive')

def git_tar(cwd, _id):
    timestamp = git_timestamp_id(cwd, _id)
    datetime = git_datetime_id(cwd, _id)
    archive = path.join(GIT_DIR, _id + ".tar")
    if path.exists(archive):
        print("\x1B[1m{} commit {}: git already built\x1B[0m".format(path.basename(cwd), _id), flush=True)
    else:
        git_archive_id(cwd, _id, archive)
    return GitTar(_id, timestamp, datetime, archive)


def github_status(name, _id, context, state):
    target_url = os.environ.get("BUILD_URL")
    if target_url is None:
        return
    else:
        print("\x1B[1m{} commit {}: setting github status of {} to {}\x1B[0m".format(name, _id, context, state), flush=True)

    url = "https://api.github.com/repos/pop-os/" + name + "/statuses/" + _id

    if args.dev:
        data = {
            "context": "ubuntu/staging/" + context,
            "description": "Ubuntu Staging " + context,
            "state": state,
            "target_url": target_url
        }
    else:
        data = {
            "context": "pop-os/staging/" + context,
            "description": "Pop!_OS Staging " + context,
            "state": state,
            "target_url": target_url
        }

    response = github_post(url, data)

    return response

debuild_lock = Lock()

def dpkg_source(name, git, series):
    extract_dir = path.join(SOURCE_DIR, git.id + "_" + series.codename)

    if path.isdir(extract_dir):
        shutil.rmtree(extract_dir)

    os.mkdir(extract_dir)

    check_call(['tar', 'xf', git.archive], cwd=extract_dir)

    if not path.isdir(path.join(extract_dir, 'debian')):
         print("\x1B[1m{} commit {} on {}: no debian dir\x1B[0m".format(name, git.id, series.codename), flush=True)
         return None, None

    with open(path.join(extract_dir, "debian", "control"), "r") as fp:
        control = Deb822(fp)

    o = check_output(["dpkg-parsechangelog", "--show-field", "Version"], cwd=extract_dir)
    changelog_version = o.decode().strip()

    source_name = control.get("Source")
    if series.codename in ('xenial', 'artful'):
        # Old format, caused issues when adding debian versions like 0.2.8 -> 0.2.8-1
        version = '+'.join([changelog_version, git.timestamp, series.version]) + "~" + git.id[:7]
    elif args.dev:
        # New format, will allow debian versions to be added
        version = '~'.join([changelog_version, git.timestamp, series.version, git.id[:7], "dev"])
    else:
        # New format, will allow debian versions to be added
        version = '~'.join([changelog_version, git.timestamp, series.version, git.id[:7]])

    path_version = version.split(":", 1)[-1]

    dsc_path = path.join(SOURCE_DIR, source_name + "_" + path_version + ".dsc")
    tar_path = path.join(SOURCE_DIR, source_name + "_" + path_version + ".tar.xz")
    orig_tar_path = path.join(SOURCE_DIR, source_name + "_" + path_version + ".orig.tar.xz")

    if not os.path.exists(dsc_path) or not os.path.exists(tar_path):
        print("\x1B[1m{} commit {} on {}: building source\x1B[0m".format(source_name, git.id, series.codename), flush=True)

        try:
            github_status(name, git.id, series.codename + "/source", "pending")

            changelog = Changelog()

            # with open(path.join(extract_dir, 'debian', 'changelog'), 'r') as f:
            #     changelog = Changelog(f.read())

            changelog.new_block(
                package=source_name,
                version=Version(version),
                distributions=series.codename,
                urgency="medium",
                author=os.environ["DEBFULLNAME"] + " <" + os.environ["DEBEMAIL"] + ">",
                date=git.datetime
            )

            changelog.add_change('')
            changelog.add_change('  * Auto Build')
            changelog.add_change('')

            with open(path.join(extract_dir, 'debian', 'changelog'), 'w') as f:
                changelog.write_to_open_file(f)

            if os.path.exists(path.join(extract_dir, 'debian', 'patches')):
                # Build the upstream orig tar if it does not exist.
                if not os.path.exists(orig_tar_path):
                    # The latest development release is considered "master"
                    if series.codename == "disco":
                        upstream_codename = "master"
                    else:
                        upstream_codename = series.codename

                    # gbp will build an orig tarball from the specified upstream branch
                    check_call([
                        'gbp',
                        'export-orig',
                        '--upstream-branch=ubuntu/' + upstream_codename,
                        '--no-pristine-tar',
                    ], stdout=null, cwd=extract_dir)

                print("\x1B[1m{} commit {} on {}: applying debian patches\x1B[0m".format(source_name, git.id, series.codename), flush=True)

                with open(os.devnull, 'w') as null:
                    check_call([
                        'quilt',
                        'push',
                        '-a',
                    ], stdout=null, cwd=extract_dir, env={"QUILT_PATCHES": "debian/patches"})

                print("\x1B[1m{} commit {} on {}: finished applying debian patches\x1B[0m".format(source_name, git.id, series.codename), flush=True)

            with debuild_lock:
                with open(os.devnull, 'w') as null:
                    check_call([
                        'debuild',
                        '--preserve-envvar', 'PATH',
                        '--set-envvar', 'SOURCE_DATE_EPOCH=' + str(git.timestamp),
                        '--no-tgz-check',
                        '-d',
                        '-S',
                        '--source-option=--tar-ignore=.git',
                    ], stdout=null, stderr=null, cwd=extract_dir)

            print("\x1B[1m{} commit {} on {}: finished building source\x1B[0m".format(source_name, git.id, series.codename), flush=True)

            github_status(name, git.id, series.codename + "/source", "success")
        except Exception as ex:
            message = "\x1B[1m{} commit {} on {}: failed to build source: {!r}\x1B[0m\n".format(source_name, git.id, series.codename, ex)

            build_log = path.join(SOURCE_DIR, source_name + "_" + path_version + "_source.build")
            with open(build_log, 'r') as f:
                message += f.read()

            print(message, flush=True)

            try:
                github_status(name, git.id, series.codename + "/source", "failure")
            except Exception as ex_s:
                print("\x1B[1m{} commit {} on {}: failed to report build failure: {!r}\x1B[0m\n".format(source_name, git.id, series.codename, ex_s))

            return None, None
    else:
        print("\x1B[1m{} commit {} on {}: source already built\x1B[0m".format(source_name, git.id, series.codename), flush=True)

    if not path.exists(dsc_path):
        print("\x1B[1m{} commit {} on {}: missing dsc {}\x1B[0m".format(source_name, git.id, series.codename, dsc_path), flush=True)
        return None, None

    if not path.exists(tar_path):
        print("\x1B[1m{} commit {} on {}: missing tar {}\x1B[0m".format(source_name, git.id, series.codename, tar_path), flush=True)
        return None, None

    return dsc_path, tar_path


def dpkg_binary(dsc_path, name, git, series):
    with open(dsc_path, "r") as fp:
        dsc = Dsc(fp)

    source_name = dsc.get("Source")
    version = dsc.get("Version")
    package_list = dsc.get("Package-List")

    path_version = version.split(":", 1)[-1]

    found_binaries = True
    debs = []
    for package_line in package_list.strip().split("\n"):
        parts = package_line.strip().split(" ")
        binary = parts[0]
        if parts[4] == "arch=all":
            arch = "all"
        else:
            arch = "amd64"
        deb_path = path.join(BINARY_DIR, binary + "_" + path_version + "_" + arch + ".deb")
        debs.append(deb_path)
        if not path.exists(deb_path):
            found_binaries = False

    build_log = path.join(BINARY_DIR, source_name + "_" + path_version + "_amd64.build")

    if found_binaries:
        print("\x1B[1m{} commit {} on {}: binaries already built\x1B[0m".format(source_name, git.id, series.codename), flush=True)
    elif not path.exists(build_log) or args.retry:
        print("\x1B[1m{} commit {} on {}: building binaries\x1B[0m".format(source_name, git.id, series.codename), flush=True)

        try:
            github_status(name, git.id, series.codename + "/binary", "pending")

            if args.dev:
                ppa_key = ".ppa-dev.asc"
                ppa_release = "system76-dev/stable"
                ppa_proposed = "system76-dev/pre-stable"
            else:
                ppa_key = ".ppa.asc"
                ppa_release = "system76/pop"
                ppa_proposed = "system76/proposed"

            check_call([
                "sbuild",
                "--arch-all",
                "--dist=" + series.codename,
                "--quiet",
                "--extra-repository=deb http://us.archive.ubuntu.com/ubuntu/ " + series.codename + "-updates main restricted universe multiverse",
                "--extra-repository=deb http://us.archive.ubuntu.com/ubuntu/ " + series.codename + "-security main restricted universe multiverse",
                "--extra-repository=deb http://ppa.launchpad.net/" + ppa_release + "/ubuntu " + series.codename + " main",
                "--extra-repository=deb http://ppa.launchpad.net/" + ppa_proposed + "/ubuntu " + series.codename + " main",
                "--extra-repository-key=" + path.join(POP_DIR, "scripts", ppa_key),
                dsc_path
            ], cwd=BINARY_DIR)

            print("\x1B[1m{} commit {} on {}: finished building binaries\x1B[0m".format(source_name, git.id, series.codename), flush=True)

            github_status(name, git.id, series.codename + "/binary", "success")
        except Exception as ex:
            try:
                github_status(name, git.id, series.codename + "/binary", "failure")
            except Exception as ex_s:
                print("\x1B[1m{} commit {} on {}: failed to report build failure: {!r}\x1B[0m\n".format(source_name, git.id, series.codename, ex_s))

            if path.exists(build_log):
                with open(build_log, 'rb') as f:
                    sys.stdout.buffer.write(f.read())
            else:
                print("\x1B[1m{} commit {} on {}: failed to find build log: {!r}\x1B[0m\n".format(source_name, git.id, series.codename, build_log))

            print("\x1B[1m{} commit {} on {}: failed to build binaries: {!r}\x1B[0m\n".format(source_name, git.id, series.codename, ex), flush=True)

            return None
    else:
        print("\x1B[1m{} commit {} on {}: binaries already failed to build\x1B[0m".format(source_name, git.id, series.codename), flush=True)


    for deb_path in debs:
        if not path.exists(deb_path):
            print("\x1B[1m{} commit {} on {}: missing binary {}\x1B[0m".format(source_name, git.id, series.codename, deb_path), flush=True)
            return None

    return debs


def build_packages(name):
    cwd = path.join(POP_DIR, name)

    if not path.exists(cwd):
        print('\x1B[1m{}: did not find {!r}\x1B[0m'.format(name, cwd), flush=True)
        return {}

    pocket_series = {}

    ids = git_ids_and_branches(cwd)
    for (_id, branches) in sorted(ids.items()):
        git = git_tar(cwd, _id)

        expanded = expand_series(branches)
        for (series, pockets) in sorted(expanded.items()):
            dsc_path, tar_path = dpkg_source(name, git, series)

            if dsc_path and tar_path:
                deb_paths = dpkg_binary(dsc_path, name, git, series)

                if deb_paths:
                    for pocket in sorted(pockets):
                        if not pocket in pocket_series:
                            pocket_series[pocket] = []

                        if not series in pocket_series[pocket]:
                            pocket_series[pocket].append(series)

                        # Produce pool: http://ppa.launchpad.net/system76/pop/ubuntu/pool/
                        pool_dir = path.join(REPO_DIR, pocket, "pool", series.codename, name)
                        os.makedirs(pool_dir)

                        for deb_path in deb_paths:
                            shutil.copy2(dsc_path, path.join(pool_dir, path.basename(dsc_path)))
                            shutil.copy2(tar_path, path.join(pool_dir, path.basename(tar_path)))
                            shutil.copy2(deb_path, path.join(pool_dir, path.basename(deb_path)))

    return pocket_series


def create_dist(email, pocket, series):
    pocket_dir = path.join(REPO_DIR, pocket)

    dist_dir = path.join(pocket_dir, "dists", series.codename)
    os.makedirs(dist_dir)

    comp_dir = path.join(dist_dir, "main")
    os.mkdir(comp_dir)

    source_dir = path.join(comp_dir, "source")
    os.mkdir(source_dir)

    binary_dir = path.join(comp_dir, "binary-amd64")
    os.mkdir(binary_dir)

    # Generate source directory: http://ppa.launchpad.net/system76/pop/ubuntu/dists/artful/main/source/
    source = check_output([
        "apt-ftparchive", "-qq",
        "sources", path.join("pool", series.codename)
    ], cwd=pocket_dir).decode()

    with open(path.join(source_dir, "Sources"), "w") as f:
        f.write(source)

    check_call(["gzip", "--keep", path.join(source_dir, "Sources")])

    # Example source release file: http://ppa.launchpad.net/system76/pop/ubuntu/dists/artful/main/source/Release
    with open(path.join(source_dir, "Release"), "w") as f:
        f.write("Archive: " + series.codename + "\n")
        f.write("Version: " + series.version + "\n")
        f.write("Component: main\n")
        f.write("Origin: pop-os-staging-" + pocket + "\n")
        f.write("Label: Pop!_OS Staging " + pocket + "\n")
        f.write("Architecture: source\n")

    # Generate binary directory: http://ppa.launchpad.net/system76/pop/ubuntu/dists/artful/main/binary-amd64/
    packages = check_output([
        "apt-ftparchive",
        "packages", path.join("pool", series.codename)
    ], cwd=pocket_dir).decode()

    with open(path.join(binary_dir, "Packages"), "w") as f:
        f.write(packages)

    check_call(["gzip", "--keep", path.join(binary_dir, "Packages")])

    # Example binary release file: http://ppa.launchpad.net/system76/pop/ubuntu/dists/artful/main/binary-amd64/Release
    with open(path.join(binary_dir, "Release"), "w") as f:
        f.write("Archive: " + series.codename + "\n")
        f.write("Version: " + series.version + "\n")
        f.write("Component: main\n")
        f.write("Origin: pop-os-staging-" + pocket + "\n")
        f.write("Label: Pop!_OS Staging " + pocket + "\n")
        f.write("Architecture: amd64\n")

    # Example dists release file: http://ppa.launchpad.net/system76/pop/ubuntu/dists/artful/Release
    release = check_output([
        "apt-ftparchive",
        "-o", "APT::FTPArchive::Release::Origin=pop-os-staging-" + pocket,
        "-o", "APT::FTPArchive::Release::Label=Pop!_OS Staging " + pocket,
        "-o", "APT::FTPArchive::Release::Suite=" + series.codename,
        "-o", "APT::FTPArchive::Release::Version=" + series.version,
        "-o", "APT::FTPArchive::Release::Codename=" + series.codename,
        "-o", "APT::FTPArchive::Release::Architectures=amd64",
        "-o", "APT::FTPArchive::Release::Components=main",
        "-o", "APT::FTPArchive::Release::Description=Pop!_OS Staging " + series.codename + " " + series.version + " " + pocket,
        "release", "."
    ], cwd=dist_dir).decode()

    with open(path.join(dist_dir, "Release"), "w") as f:
        f.write(release)

    check_call([
        "gpg", "--clearsign",
        "--local-user", email,
        "--batch", "--yes",
        "--digest-algo", "sha512",
        "-o", path.join(dist_dir, "InRelease"), path.join(dist_dir, "Release")
    ])

    check_call([
        "gpg", "-abs",
        "--local-user", email,
        "--batch", "--yes",
        "--digest-algo", "sha512",
        "-o", path.join(dist_dir, "Release.gpg"), path.join(dist_dir, "Release")
    ])


def create_dists(email, pocket_series):
    for pocket in pocket_series:
        iprint(0, pocket)

        for series in pocket_series[pocket]:
            iprint(1, series)

            create_dist(email, pocket, series)



def callback(repo):
    name =  repo['name']

    if name.startswith("packaging-"):
        print('\x1B[1m{}: skipping\x1B[0m'.format(name), flush=True)
        return {}
    else:
        return build_packages(name)


def create_dir(d):
    if not path.isdir(d):
        os.mkdir(d)


def recreate_dir(d):
    if path.isdir(d):
        shutil.rmtree(d)
        os.mkdir(d)


def ci():
    email = os.environ.get("DEBEMAIL")
    if email is None:
        raise Exception("DEBEMAIL is not set")

    full_name = os.environ.get("DEBFULLNAME")
    if full_name is None:
        raise Exception("DEBFULLNAME is not set")

    create_dir(BUILD_DIR)

    create_dir(GIT_DIR)
    create_dir(SOURCE_DIR)
    create_dir(BINARY_DIR)
    recreate_dir(REPO_DIR)

    all_pocket_series = {}
    for repo_name, pocket_series in foreach_repo(callback, args.repos, args.dev).items():
        for pocket in pocket_series:
            for series in pocket_series[pocket]:
                if not pocket in all_pocket_series:
                    all_pocket_series[pocket] = []

                if not series in all_pocket_series[pocket]:
                    all_pocket_series[pocket].append(series)

    create_dists(email, all_pocket_series)


ci()
